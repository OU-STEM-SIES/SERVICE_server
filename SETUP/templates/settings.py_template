"""
Django settings for covid_stretch project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# You can generate a Django secret key online, at sites such as
# https://djecrety.ir
# or
# https://miniwebtool.com/django-secret-key-generator/

####################################################################
# SECURITY WARNING: Keep the secret key used in production secret! #
####################################################################

SECRET_KEY = "####SECRET_KEY####"

DEBUG = ####debugmode####

ALLOWED_HOSTS = ####ALLOWED_HOSTS####

# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",  # makes Django dev server hand over to Whitenoise instead

    #Django built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "widget_tweaks",
    "django.contrib.humanize",
    "multiselectfield",
    "corsheaders",
    "crispy_forms",
    "rest_framework",
    "rest_framework.authtoken",
####ou_installation_apps####

    # Our apps
    "phone_field",
    "user_profile",
    "messaging",
    "moods",
    "dashboard",
    "emotional_status"
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    # "covid_stretch.AuthMiddleware.TokenMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    # "covid_stretch.AuthMiddleware.TokenBackend",
]

ROOT_URLCONF = "covid_stretch.urls"
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = ['http://stem-service-project.open.ac.uk',
                        'https://stem-service-project.open.ac.uk']

# CORS_REPLACE_HTTPS_REFERER = True

# CSRF_COOKIE_DOMAIN = 'open.ac.uk'

CORS_ORIGIN_WHITELIST = (
    'http://stem-service-project.open.ac.uk',
    'https://stem-service-project.open.ac.uk',
)
CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.AllowAny',  # Debugging only, removes security!
        'rest_framework.permissions.IsAuthenticated',
        ]
    }

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(os.path.join(BASE_DIR, 'templates'))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            'libraries':{
                'template_filters': 'dashboard.template_filters',
            }
        },
    },
]

WSGI_APPLICATION = "covid_stretch.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default":
    {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "DATABASE/db.sqlite3"),
        }
    }

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-gb"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
DATE_FORMAT = 'j F, Y'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "STATIC")
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'STATIC'),]

# If you keep getting http server error 500, read this:
# https://stackoverflow.com/questions/53859972/django-whitenoise-500-server-error-in-non-debug-mode
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# in other words, try MANUALLY clearing static files, then manage.py collectstatic .
# Failling that, change
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# to
# STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "MEDIA")

# Stuff added for login - see https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/

LOGIN_URL = '/accounts/login/'

LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/dashboard/'

#############################################
# Outgoing mail (SMTP) server configuration #
#############################################
####mail_config_text####

