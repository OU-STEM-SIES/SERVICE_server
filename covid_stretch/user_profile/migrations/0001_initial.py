# Generated by Django 3.2.10 on 2022-01-13 10:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import phone_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.CharField(blank=True, choices=[('PAC', 'pac'), ('LNK', 'linkworker'), ('SUP', 'supporter'), ('ADM', 'admin')], default='SUP', max_length=3, null=True)),
                ('phone', phone_field.models.PhoneField(blank=True, help_text='Contact phone number', max_length=31, null=True)),
                ('image', models.ImageField(blank=True, default='1.jpg', null=True, upload_to='')),
                ('date_of_birth', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('gender', models.CharField(choices=[('WOM', 'Woman'), ('MAN', 'Man'), ('NBIN', 'Non-binary'), ('PNTD', 'Prefer not to disclose'), ('PTSD', 'Prefer to self describe')], default='PTSD', max_length=4)),
                ('ethnicity', models.CharField(choices=[('WHTE', 'White'), ('MXED', 'Mixed/Multiple ethnic groups'), ('ASIN', 'Asian/Asian British'), ('BLCK', 'Black/African/Caribbean/Black British'), ('CHIN', 'Chinese'), ('ARAB', 'Arab'), ('OTHR', 'Other')], default='OTHR', max_length=4)),
                ('education', models.CharField(choices=[('NONE', 'No qualifications'), ('GCE1', '1-4 GCSEs, Scottish Standard Grade'), ('GCE5', '5 or more GCSEs, Scottish Higher, Scottish Advanced Higher'), ('APRT', 'Apprenticeship'), ('ALEV', '2 or more A-levels, HNC, HND, SVQ level 4'), ('DEGR', 'First or higher degree'), ('OTHR', 'Other vocational / work related qualifications')], default='NONE', max_length=4)),
                ('disability', models.CharField(choices=[('NONE', 'No disability'), ('MILD', 'Mild to moderate disability'), ('MODD', 'Moderate disability'), ('SVDS', 'Severe disability'), ('VERY', 'Very severe disability')], default='NONE', max_length=4)),
                ('marital_status', models.CharField(choices=[('SING', 'Single, never married or civil partnered'), ('MARR', 'Married, including separated (this category includes those in both opposite-sex and same-sex marriages)'), ('CIVL', 'Civil partnered, including separated '), ('DIVD', 'Divorced, including legally dissolved civil partners'), ('WIDO', 'Widowed, including surviving civil partners')], default='SING', max_length=4)),
                ('smoking', models.BooleanField(default=False)),
                ('alcohol_units_per_week', models.PositiveIntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199), (200, 200), (201, 201), (202, 202), (203, 203), (204, 204), (205, 205), (206, 206), (207, 207), (208, 208), (209, 209), (210, 210), (211, 211), (212, 212), (213, 213), (214, 214), (215, 215), (216, 216), (217, 217), (218, 218), (219, 219), (220, 220), (221, 221), (222, 222), (223, 223), (224, 224), (225, 225), (226, 226), (227, 227), (228, 228), (229, 229), (230, 230), (231, 231), (232, 232), (233, 233), (234, 234), (235, 235), (236, 236), (237, 237), (238, 238), (239, 239), (240, 240), (241, 241), (242, 242), (243, 243), (244, 244), (245, 245), (246, 246), (247, 247), (248, 248), (249, 249), (250, 250)], default=0)),
                ('health_conditions', multiselectfield.db.fields.MultiSelectField(choices=[('0', 'No health problems'), ('1', 'Arms or hands'), ('2', 'Back or neck'), ('3', 'Difficulty in seeing'), ('4', 'Difficulty in hearing'), ('5', 'Speech impediment'), ('6', 'Skin conditions, allergies'), ('7', 'Chest, breathing problems'), ('8', 'Heart, blood, blood pressure, circulation'), ('9', 'Stomach, liver, kidney, digestion'), ('10', 'Diabetes'), ('11', 'Depression, bad nerves'), ('12', 'Epilepsy'), ('13', 'Learning difficulties'), ('14', 'Mental illness, phobia, panics'), ('15', 'Progressive illness n.e.c.'), ('16', 'Other problems, disabilities')], default='0', max_length=3)),
                ('things_liked', models.CharField(choices=[('TV', 'TV'), ('EXER', 'Exercise'), ('ART', 'Arts & Crafts'), ('COOK', 'Cooking'), ('READ', 'Reading'), ('SOC', 'Socialising'), ('GARD', 'Gardening'), ('COMP', 'Computer'), ('HYG', 'Hygiene'), ('CLEN', 'Cleaning'), ('VOL', 'Volunteering'), ('MUS', 'Music')], default='', max_length=4)),
                ('things_disliked', models.CharField(choices=[('TV', 'TV'), ('EXER', 'Exercise'), ('ART', 'Arts & Crafts'), ('COOK', 'Cooking'), ('READ', 'Reading'), ('SOC', 'Socialising'), ('GARD', 'Gardening'), ('COMP', 'Computer'), ('HYG', 'Hygiene'), ('CLEN', 'Cleaning'), ('VOL', 'Volunteering'), ('MUS', 'Music')], default='', max_length=4)),
                ('family_has', models.BooleanField(default=False)),
                ('family_bond', models.IntegerField(blank=True, choices=[(None, 'No answer'), (1, '1 - Very distant'), (2, '2 - Somewhat distant'), (3, '3 - Slightly distant'), (4, '4 - Neither close nor distant'), (5, '5 - Slightly close'), (6, '6 - Somewhat close'), (7, '7 - Very close')], null=True)),
                ('community_bond', models.IntegerField(blank=True, choices=[(None, 'No answer'), (1, '1 - Very distant'), (2, '2 - Somewhat distant'), (3, '3 - Slightly distant'), (4, '4 - Neither close nor distant'), (5, '5 - Slightly close'), (6, '6 - Somewhat close'), (7, '7 - Very close')], null=True)),
                ('social_groups', models.CharField(blank=True, choices=[('FAML', 'Family'), ('FRND', 'Friends'), ('SOCL', 'Social club'), ('SPRT', 'Sport'), ('PROF', 'Professional'), ('VOLN', 'Voluntary'), ('LEAR', 'Learning'), ('NBOR', 'Neighbourhood'), ('FATH', 'Faith'), ('POLI', 'Political'), ('OTHR', 'Other group')], max_length=4, null=True)),
                ('social_group_other', models.CharField(blank=True, max_length=32, null=True)),
                ('social_bond', models.IntegerField(blank=True, choices=[(None, 'No answer'), (1, '1 - Very distant'), (2, '2 - Somewhat distant'), (3, '3 - Slightly distant'), (4, '4 - Neither close nor distant'), (5, '5 - Slightly close'), (6, '6 - Somewhat close'), (7, '7 - Very close')], null=True)),
                ('link_worker_has', models.BooleanField(default=False)),
                ('link_worker_bond', models.IntegerField(blank=True, choices=[(None, 'No answer'), (1, '1 - Very distant'), (2, '2 - Somewhat distant'), (3, '3 - Slightly distant'), (4, '4 - Neither close nor distant'), (5, '5 - Slightly close'), (6, '6 - Somewhat close'), (7, '7 - Very close')], null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('COFU', 'User updated their Circle Of Friends'), ('PROF', 'User updated their profile'), ('PSWD', 'User changed their password (password is not logged)'), ('DELE', 'User and associated data deleted')], max_length=4)),
                ('description', models.CharField(max_length=128)),
                ('prediffjson', models.JSONField(blank=True, max_length=65535, null=True)),
                ('postdiffjson', models.JSONField(blank=True, max_length=65535, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Supporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(blank=True, choices=[('FAML', 'Family'), ('FRND', 'Friends'), ('SOCL', 'Social club'), ('SPRT', 'Sport'), ('PROF', 'Professional'), ('VOLN', 'Voluntary'), ('LEAR', 'Learning'), ('NBOR', 'Neighbourhood'), ('FATH', 'Faith'), ('POLI', 'Political'), ('OTHR', 'Other group')], max_length=4, null=True)),
                ('how_often_expected_interaction', models.IntegerField(blank=True, choices=[(1, 'Daily'), (2, 'Weekly'), (3, 'Fortnightly'), (4, 'Monthly'), (5, 'Yearly')], null=True)),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='supporters', to='user_profile.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Person_at_centre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('NEW', 'new'), ('NRM', 'normal'), ('DRM', 'dormant'), ('UPD', 'update')], default='NEW', max_length=3)),
                ('circle_of_support_1', models.ManyToManyField(blank=True, related_name='circle1', to='user_profile.Supporter')),
                ('circle_of_support_2', models.ManyToManyField(blank=True, related_name='circle2', to='user_profile.Supporter')),
                ('circle_of_support_3', models.ManyToManyField(blank=True, related_name='circle3', to='user_profile.Supporter')),
                ('supporters', models.ManyToManyField(related_name='my_supporters', to='user_profile.Supporter')),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='my_clients', to='user_profile.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Linkworker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linkworker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='key', to='user_profile.userprofile')),
                ('pacs', models.ManyToManyField(related_name='list_of_clients', to='user_profile.Person_at_centre')),
            ],
        ),
    ]
